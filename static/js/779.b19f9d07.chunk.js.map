{"version":3,"file":"static/js/779.b19f9d07.chunk.js","mappings":"oSAuBaA,EAAU,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMC,GAAK,IAAAC,EAAAC,EAAA,OAAAJ,IAAAA,MAAA,SAAAK,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEVC,EAAAA,EAAAA,IALX,kDAK8B,CACxCC,OAAQ,CACNC,EAAGR,EACHS,MAAO,SACPC,MAROC,sCAUR,KAAD,EANU,OAMVV,EAAAE,EAAAS,KANMV,EAAID,EAAJC,KAAIC,EAAAU,OAAA,SAOLX,GAAI,OAckC,MAdlCC,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAEPA,EAAAW,GAAMC,UAERC,QAAQC,MAAM,uBAAwBd,EAAAW,GAAMC,SAASb,MACrDc,QAAQC,MAAM,yBAA0Bd,EAAAW,GAAMC,SAASG,QACvDF,QAAQC,MAAM,0BAA2Bd,EAAAW,GAAMC,SAASI,UAC/ChB,EAAAW,GAAMM,QAEfJ,QAAQC,MAAM,sBAAuBd,EAAAW,GAAMM,SAG3CJ,QAAQC,MAAM,iBAAkBd,EAAAW,GAAMO,SAExCL,QAAQC,MAAM,gBAAiBd,EAAAW,GAAMQ,QAAQnB,EAAAW,GAAA,yBAAAX,EAAAoB,OAAA,GAAAxB,EAAA,kBAGhD,gBA1BsByB,GAAA,OAAA5B,EAAA6B,MAAA,KAAAC,UAAA,K,UCkGvB,MArHA,WACE,IAAAC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/B3B,EAAK6B,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAA8BJ,EAAAA,EAAAA,UAAS,CACrC1B,KAAM,CAAC,EACPe,OAAO,IACPgB,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAHKE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAsCpBG,EAAM,eAAAxC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAuC,EAAMC,GAAK,IAAAC,EAAA,OAAAzC,IAAAA,MAAA,SAAA0C,GAAA,cAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,OACN,UAAdiC,EAAMG,MACRH,EAAMI,iBACNX,EAAS,IACTI,GAAUQ,EAAAA,EAAAA,GAAC,CAAC,EAAIT,IAEVK,EAAK,eAAAK,GAAA/C,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAG,EAAA,OAAAJ,IAAAA,MAAA,SAAAK,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAESV,EAAWK,GAAO,KAAD,EAA9BE,EAAIC,EAAAS,KACVuB,EAAW,CAAEjC,KAAMA,EAAMe,OAAO,IAASd,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAEzCgC,GAAUQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIT,GAAO,IAAEhC,KAAM,CAAC,EAAGe,OAAO,KAC1Cc,EAAS,IACTf,QAAQ6B,IAAI1C,EAAAW,GAAMO,SAAS,yBAAAlB,EAAAoB,OAAA,GAAAxB,EAAA,kBAE9B,kBATU,OAAA6C,EAAAnB,MAAA,KAAAC,UAAA,KAUXa,KACD,wBAAAC,EAAAjB,OAAA,GAAAc,EAAA,KACF,gBAlBWb,GAAA,OAAA5B,EAAA6B,MAAA,KAAAC,UAAA,KAoBZ,OACEoB,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,UAAU,SAASC,IAAI,OAAMC,SAAA,EACjCJ,EAAAA,EAAAA,MAACK,EAAAA,EAAO,CAACC,GAAG,KAAIF,SAAA,CAAC,YACPG,EAAAA,EAAAA,KAAA,QAAAH,SAAM,uBAEhBG,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAAAJ,UACFG,EAAAA,EAAAA,KAACE,EAAAA,EAAK,CACJC,OAAO,kBACPC,aAAa,OACbC,GAAG,QACHC,QAAQ,sBACRC,KAAM,IACNC,WAAS,EACTC,KAAK,OACLC,SAAS,OACTC,YAAY,gBACZC,KAAK,QACLC,MAAOlE,EACPmE,SAAU,SAAA7B,GAAK,OAAIP,EAASO,EAAM8B,OAAOF,MAAM,EAC/CG,UAAWjC,MAIdF,EAAQjB,QACPoC,EAAAA,EAAAA,KAAA,QAAAH,UACEG,EAAAA,EAAAA,KAAA,QAAMiB,MAAO,CAAEP,SAAU,QAASb,SAAC,6BAItChB,GAAWA,EAAQhC,MAAQgC,EAAQhC,KAAKqE,OACvCzB,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEJ,EAAAA,EAAAA,MAAA,MAAAI,SAAA,CACGhB,EAAQhC,KAAK+D,KAAK,MAAEZ,EAAAA,EAAAA,KAAA,QAAAH,SAAOhB,EAAQhC,KAAKsE,IAAIC,cAE/CpB,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAAAJ,UACFG,EAAAA,EAAAA,KAAA,QAAAH,SAxFK,WACb,IAyBMwB,EAAc,IAAIC,KAIxB,MAHU,GAAAC,OAXG,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAImBF,EAAYG,UAAS,MAAAD,OAAKF,EAAYI,UAAS,KAAAF,OA1BrD,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAeOF,EAAYK,YAGvB,CAyDiBC,QAETlC,EAAAA,EAAAA,MAACQ,EAAAA,GAAG,CAAAJ,SAAA,EACFG,EAAAA,EAAAA,KAAA,OACE4B,IAAG,qCAAAL,OAAuC1C,EAAQhC,KAAKgC,QAAQ,GAAGgD,KAAI,WACtEC,IAAKjD,EAAQhC,KAAKgC,QAAQ,GAAGkD,eAE/BtC,EAAAA,EAAAA,MAAA,KAAAI,SAAA,CACGmC,KAAKC,MAAMpD,EAAQhC,KAAKqE,KAAKgB,OAC9BlC,EAAAA,EAAAA,KAAA,QAAAH,SAAM,mBAGVJ,EAAAA,EAAAA,MAACQ,EAAAA,GAAG,CAAAJ,SAAA,EACFG,EAAAA,EAAAA,KAACmC,EAAAA,EAAI,CAAAtC,SAAEhB,EAAQhC,KAAKgC,QAAQ,GAAGkD,YAAYK,iBAC3C3C,EAAAA,EAAAA,MAAC0C,EAAAA,EAAI,CAAAtC,SAAA,CAAC,eAAahB,EAAQhC,KAAKwF,KAAKC,MAAM,iBAMvD,EC9EA,EAtCiB,WACf,OACEtC,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAACF,GAAG,UAAUwC,GAAI,GAAG1C,UACvBG,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,CAACjC,KAAK,QAAOV,UACrBJ,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACE,IAAI,OAAO6C,QAAQ,gBAAe5C,SAAA,EACtCJ,EAAAA,EAAAA,MAACQ,EAAAA,GAAG,CAACM,KAAM,IAAIV,SAAA,EACbG,EAAAA,EAAAA,KAACF,EAAAA,EAAO,CAACC,GAAG,KAAK2C,KAAM,CAAC,KAAM,MAAOC,UAAU,SAASC,GAAI,EAAE/C,SAAC,+CAG/DJ,EAAAA,EAAAA,MAAC0C,EAAAA,EAAI,CAACQ,UAAU,SAAQ9C,SAAA,CAAC,6LAIvBG,EAAAA,EAAAA,KAAA,SAAM,oaAQNA,EAAAA,EAAAA,KAAA,SAAM,mMAINA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UAAAH,SAAQ,8CAIZG,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAACM,KAAM,IAAIV,UACbG,EAAAA,EAAAA,KAAC6C,EAAW,YAMxB,C,8TCzBA,GAA0DC,EAAAA,EAAAA,GAExD,CACAlC,KAAM,2BACNmC,aAAc,kHACfC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GALMC,EAAAA,EAAAA,GAA2BC,EAAoB,KA+DtD,GACEJ,EAAAA,EAAAA,GAA0C,CACxCK,QAAQ,EACRvC,KAAM,uBACPwC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAJIC,EAAAA,EAAAA,GAAqBC,EAAqB,KAsJ1C,IAAMC,GAAcC,EAAAA,EAAAA,IACzB,SAAqBC,EAAOC,GAC1B,IAAMC,GAASC,EAAAA,EAAAA,IAAoB,OAAQH,GAE3C,EApJJ,SAAgCA,GAC9B,IACMI,EAMFJ,EANFK,GACAC,EAKEN,EALFM,WACAC,EAIEP,EAJFO,UACAC,EAGER,EAHFQ,WACAC,EAEET,EAFFS,WACGC,GAAAA,EAAAA,EAAAA,GACDV,EAAAA,GAGEW,GAAOC,EAAAA,EAAAA,SACPP,EAAKD,GAAU,SAAVA,OAAmBO,GAExBE,EAAU,GAAVA,OAAaR,EAAE,UACfS,EAAa,GAAbA,OAAgBT,EAAE,aAClBU,EAAa,GAAbA,OAAgBV,EAAE,aAMxB,GAA8CvF,EAAAA,EAAAA,WAAS,GAAKC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAArDiG,EAAAA,EAAAA,GAAiBC,EAAkB,KAM1C,GAAsCnG,EAAAA,EAAAA,WAAS,GAAKK,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAA7C+F,EAAAA,EAAAA,GAAaC,EAAc,KAGlC,GAA8BrG,EAAAA,EAAAA,WAAS,GAAKsG,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAArCC,EAAAA,EAAAA,GAAWC,EAAQ,KAEpBC,GAAmBC,EAAAA,EAAAA,cACvB,eAACxB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGyB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,4BAC1BpB,GAAIU,GACDf,GAAAA,CAAAA,EAAAA,CAKHC,KAAKyB,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GACLR,GAAe,EACjB,KAAC,GAEH,CAACJ,IAGGa,GAAgBJ,EAAAA,EAAAA,cACpB,eAACxB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGyB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,8BACvBzB,GAAAA,CAAAA,EAAAA,CACHC,IAAKwB,EACL,cAAcI,EAAAA,EAAAA,IAASR,GACvB,iBAAiBQ,EAAAA,EAAAA,IAASrB,GAC1B,gBAAgBqB,EAAAA,EAAAA,IAAStB,GACzB,iBAAiBsB,EAAAA,EAAAA,IAASpB,GAC1BJ,QAAiB,IAAbL,EAAMK,GAAmBL,EAAMK,GAAKQ,EACxCiB,aAA2B,IAAlB9B,EAAM8B,QAAwB9B,EAAM8B,QAAUzB,GAAA,GAEzD,CAACA,EAAIG,EAAYa,EAAWd,EAAWE,EAAYI,IAG/CkB,GAAuBP,EAAAA,EAAAA,cAC3B,eAACxB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGyB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,4BAC1BpB,GAAIS,GACDd,GAAAA,CAAAA,EAAAA,CAKHC,KAAKyB,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GACLV,GAAmB,EACrB,IACA,YAAa,aAEf,CAACH,IAGGkB,GAAeR,EAAAA,EAAAA,cACnB,eAACxB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGyB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,sCACvBzB,GACAU,GAAAA,CAAAA,EAAAA,CACHT,IAAKwB,EACLQ,KAAM,QACN,cAAcJ,EAAAA,EAAAA,IAASR,GACvB,iBAAiBQ,EAAAA,EAAAA,IAASrB,GAC1B,gBAAgBqB,EAAAA,EAAAA,IAAStB,GACzB,iBAAiBsB,EAAAA,EAAAA,IAASpB,IAAU,GAEtC,CAACC,EAAWF,EAAYa,EAAWd,EAAWE,IAG1CyB,GAA4BV,EAAAA,EAAAA,cAChC,eAACxB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGyB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,8BACvBzB,GAAAA,CAAAA,EAAAA,CACHC,IAAKwB,EACLQ,KAAM,eACN,eAAe,EACf7F,SAAU4D,EAAM5D,UAAY,QAE9B,IAGF,MAAO,CACLkE,aAAcA,EACdC,YAAaA,EACbE,aAAcA,EACdD,aAAcA,EACda,YAAaA,EACbc,QAAS,kBAAMb,GAAS,EAAI,EAC5Bc,OAAQ,kBAAMd,GAAS,EAAK,EAC5BN,gBAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,eAAAA,EACAd,GAAAA,EACAQ,QAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAL,UAAAA,EACAa,iBAAAA,EACAQ,qBAAAA,EACAC,aAAAA,EACAJ,cAAAA,EACAM,0BAAAA,EAEJ,CAwBQG,EALaC,EAAAA,EAAAA,IAAiBtC,IAEhCgC,EAAAA,EAAAA,aAEGO,GADQC,EAAX9B,WACG6B,EAAAA,EAAAA,GAAAA,EAAAA,IAGCE,GAAYC,EAAAA,EAAAA,IAAG,sBAAuB1C,EAAMyC,WAElD,OACE,SAAC7C,EAAAA,CAAoBxC,MAAOmF,EAC1BnG,UAAAA,EAAAA,EAAAA,KAACoD,EAAAA,CAA0BpC,MAAO8C,EAChC9D,UAAAA,EAAAA,EAAAA,KAACuG,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACLZ,EAAa,CAAC,EAAG/B,IAAG,IACxBwC,UAAAA,EACAI,MAAO3C,EAAkB,gBAKnC,IAGFJ,EAAYgD,YAAc,eAWI/C,EAAAA,EAAAA,IAC5B,SAAwBC,EAAOC,GAC7B,IAAM8C,EAAQlD,IACRK,EAAST,IACTgD,GAAYC,EAAAA,EAAAA,IAAG,2BAA4B1C,EAAMyC,WACvD,OACE,SAACE,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACLG,MAAAA,OAAAA,EAAAA,EAAOxB,iBAAiBvB,EAAOC,IAAAA,CAAAA,EAAAA,CACnC4C,MAAO3C,EAAO8C,WACdP,UAAAA,IAGN,IAGaK,YAAc,gB,0QCjQtB,SAASG,EACdjD,GAEA,MAiBK,SACLA,GA5CF,UA8CQ+C,GAAQlD,EAAAA,EAAAA,MAGZQ,EAWEL,EAXFK,GACA6C,EAUElD,EAVFkD,SACAC,EASEnD,EATFmD,SACAC,EAQEpD,EARFoD,SACA9C,EAOEN,EAPFM,WACAC,EAMEP,EANFO,UACAE,EAKET,EALFS,WACAD,EAIER,EAJFQ,WACA2B,EAGEnC,EAHFmC,QACAC,EAEEpC,EAFFoC,OACGiB,GAAAA,EAAAA,EAAAA,GACDrD,EAAAA,GAEEsD,EAAqBtD,EAAM,oBAC7B,CAACA,EAAM,qBACP,IAGA+C,MAAAA,OAAAA,EAAAA,EAAO/B,mBAAmB+B,MAAAA,OAAAA,EAAAA,EAAOxC,YACnC+C,EAASC,KAAKR,EAAMjC,aAGlBiC,MAAAA,OAAAA,EAAAA,EAAO7B,cACToC,EAASC,KAAKR,EAAMhC,YAGtB,OAAO,kBACFsC,GAAAA,CAAAA,EAAAA,CACH,mBAAoBC,EAASE,KAAK,WAAQ,EAC1CnD,GAAIA,MAAAA,EAAAA,EAAM0C,MAAAA,OAAAA,EAAAA,EAAO1C,GACjBG,WAAY,OAAAiD,EAAAA,MAAAA,EAAAA,EAAYjD,GAAZ,EAA0BuC,MAAAA,OAAAA,EAAAA,EAAOvC,WAC7CC,WAAY,OAAAiD,EAAAA,MAAAA,EAAAA,EAAYjD,GAAZ,EAA0BsC,MAAAA,OAAAA,EAAAA,EAAOtC,WAC7CH,WAAY,OAAAqD,EAAAA,MAAAA,EAAAA,EAAYrD,GAAZ,EAA0ByC,MAAAA,OAAAA,EAAAA,EAAOzC,WAC7CC,UAAWA,MAAAA,EAAAA,EAAawC,MAAAA,OAAAA,EAAAA,EAAOxC,UAC/B4B,SAASyB,EAAAA,EAAAA,IAAgBb,MAAAA,OAAAA,EAAAA,EAAOZ,QAASA,GACzCC,QAAQwB,EAAAA,EAAAA,IAAgBb,MAAAA,OAAAA,EAAAA,EAAOX,OAAQA,IAE3C,CA3DIyB,CAAoB7D,GADdQ,EAAAA,EAAAA,WAAYD,EAAAA,EAAAA,UAAWE,EAAAA,EAAAA,WAAYH,EAAAA,EAAAA,WAAe+C,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAG1D,OAAO,kBACFA,GAAAA,CAAAA,EAAAA,CACHH,SAAU1C,EACV2C,SAAU1C,EACV2C,SAAU9C,EACV,gBAAgBwD,EAAAA,EAAAA,IAASvD,GACzB,iBAAiBuD,EAAAA,EAAAA,IAASxD,GAC1B,iBAAiBwD,EAAAA,EAAAA,IAASrD,IAE9B,C,qECOahE,GAAQsD,EAAAA,EAAAA,IAAgC,SACnDC,EACAC,GAEA,IAAQ8D,EAAsB/D,EAAtB+D,SAAaV,GAAAA,EAAAA,EAAAA,GAASrD,EAAAA,GAExBE,GAASC,EAAAA,EAAAA,IAAoB,QAASkD,GAEtCW,EAAQf,GADGX,EAAAA,EAAAA,IAAiBe,IAE5BY,GAAavB,EAAAA,EAAAA,IAAG,eAAgB1C,EAAMyC,WAE5C,OACE,SAACE,EAAAA,EAAAA,OAAYqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CACX/E,KAAM8E,GACFC,GAAAA,CAAAA,EAAAA,CACJnB,MAAO3C,EAAO6C,MACd9C,IAAAA,EACAwC,UAAWwB,IAGjB,IAEAxH,EAAMqG,YAAc,QAGpBrG,EAAM4D,GAAK,O","sources":["servicApi/wheatherApi.js","components/WeatherForm/WeatherForm.jsx","pages/HomePage.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["// import axios from 'axios';\n\n// const baseUrl = 'https://api.openweathermap.org/data/2.5/weather';\n\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// export const getWeather = async query => {\n//   const { data } = await axios.get(baseUrl, {\n//     params: {\n//       q: query,\n//       units: 'metric',\n//       appid: apiKey,\n//     },\n//   });\n\n//   return data;\n// };\n\nimport axios from 'axios';\n\nconst baseUrl = 'https://api.openweathermap.org/data/2.5/weather';\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nexport const getWeather = async query => {\n  try {\n    const { data } = await axios.get(baseUrl, {\n      params: {\n        q: query,\n        units: 'metric',\n        appid: apiKey,\n      },\n    });\n    return data;\n  } catch (error) {\n    if (error.response) {\n      // Server responded with a status other than 2xx\n      console.error('Error response data:', error.response.data);\n      console.error('Error response status:', error.response.status);\n      console.error('Error response headers:', error.response.headers);\n    } else if (error.request) {\n      // Request was made but no response was received\n      console.error('Error request data:', error.request);\n    } else {\n      // Something went wrong in setting up the request\n      console.error('Error message:', error.message);\n    }\n    console.error('Error config:', error.config);\n    throw error; // Rethrow to be handled by caller\n  }\n};\n","import { useState } from 'react';\nimport { Box, Flex, Heading, Input, Text } from '@chakra-ui/react';\nimport { getWeather } from 'servicApi/wheatherApi';\n\nfunction WeatherForm() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({\n    data: {},\n    error: false,\n  });\n\n  const toDate = () => {\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n\n    const days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n    ];\n\n    const currentDate = new Date();\n    const date = `${days[currentDate.getDay()]}, ${currentDate.getDate()} ${\n      months[currentDate.getMonth()]\n    }`;\n    return date;\n  };\n\n  const search = async event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      setQuery('');\n      setWeather({ ...weather });\n\n      const fetch = async () => {\n        try {\n          const data = await getWeather(query);\n          setWeather({ data: data, error: false });\n        } catch (error) {\n          setWeather({ ...weather, data: {}, error: true });\n          setQuery('');\n          console.log(error.message);\n        }\n      };\n      fetch();\n    }\n  };\n\n  return (\n    <Flex direction=\"column\" gap=\"20px\">\n      <Heading as=\"h2\">\n        Weather <span> 🌤 </span>\n      </Heading>\n      <Box>\n        <Input\n          border=\" 2px solid #ccc\"\n          borderRadius=\"20px\"\n          bg=\"white\"\n          padding=\"12px 20px 12px 20px\"\n          maxW={300}\n          autoFocus\n          type=\"text\"\n          fontSize=\"16px\"\n          placeholder=\"Search City..\"\n          name=\"query\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n          onKeyDown={search}\n        ></Input>\n      </Box>\n\n      {weather.error && (\n        <span>\n          <span style={{ fontSize: '26px' }}> Sorry, City not found</span>\n        </span>\n      )}\n\n      {weather && weather.data && weather.data.main && (\n        <div>\n          <h2>\n            {weather.data.name}, <span>{weather.data.sys.country}</span>\n          </h2>\n          <Box>\n            <span>{toDate()}</span>\n          </Box>\n          <Box>\n            <img\n              src={`https://openweathermap.org/img/wn/${weather.data.weather[0].icon}@2x.png`}\n              alt={weather.data.weather[0].description}\n            />\n            <p>\n              {Math.round(weather.data.main.temp)}\n              <span> &deg;C </span>\n            </p>\n          </Box>\n          <Box>\n            <Text>{weather.data.weather[0].description.toUpperCase()}</Text>\n            <Text>Wind Speed: {weather.data.wind.speed}m/s</Text>\n          </Box>\n        </div>\n      )}\n    </Flex>\n  );\n}\n\nexport default WeatherForm;\n","import { Box, Container, Flex, Heading, Text } from '@chakra-ui/react';\nimport WeatherForm from 'components/WeatherForm/WeatherForm';\n\nconst HomePage = () => {\n  return (\n    <Box as=\"section\" py={20}>\n      <Container maxW=\"800px\">\n        <Flex gap=\"20px\" justify=\"space-between\">\n          <Box maxW={400}>\n            <Heading as=\"h1\" size={['md', 'lg']} textAlign=\"center\" mb={5}>\n              Welcome to your new digital address book!\n            </Heading>\n            <Text textAlign=\"center\">\n              We've created for you a special place to keep all your phone\n              numbers — whether they belong to people you love or those you'd\n              rather forget, but haven't managed to yet. 😊\n              <br />\n              Why burden your brain with remembering all those numbers when you\n              can keep them safe here? And if, heaven forbid, you lose your\n              phone, at least your contacts will still be safe. If our server\n              decides to take a break and you lose all your contacts... consider\n              it an opportunity to make new friends! Because, honestly, those\n              old friends who haven't reached out until now probably won't start\n              anytime soon. 😉\n              <br />\n              Create your own account and keep your connections alive, even with\n              those people you haven't talked to in years. Who knows, maybe\n              they'll give you a call to thank you for keeping their number.\n              <br />\n              <strong>Good luck, and happy reconnecting!</strong>\n            </Text>\n          </Box>\n\n          <Box maxW={500}>\n            <WeatherForm />\n          </Box>\n        </Flex>\n      </Container>\n    </Box>\n  );\n};\nexport default HomePage;\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["getWeather","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","query","_yield$axios$get","data","_context","prev","next","axios","params","q","units","appid","process","sent","abrupt","t0","response","console","error","status","headers","request","message","config","stop","_x","apply","arguments","_useState","useState","_useState2","_slicedToArray","setQuery","_useState3","_useState4","weather","setWeather","search","_callee2","event","fetch","_context2","key","preventDefault","_objectSpread","_ref2","log","_jsxs","Flex","direction","gap","children","Heading","as","_jsx","Box","Input","border","borderRadius","bg","padding","maxW","autoFocus","type","fontSize","placeholder","name","value","onChange","target","onKeyDown","style","main","sys","country","currentDate","Date","concat","getDay","getDate","getMonth","toDate","src","icon","alt","description","Math","round","temp","Text","toUpperCase","wind","speed","py","Container","justify","size","textAlign","mb","WeatherForm","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","FormControl","forwardRef","props","ref","styles","useMultiStyleConfig","idProp","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_","className","cx","chakra","div","__css","displayName","field","helperText","useFormControl","disabled","readOnly","required","rest","labelIds","push","join","_a","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className"],"sourceRoot":""}