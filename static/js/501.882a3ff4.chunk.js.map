{"version":3,"file":"static/js/501.882a3ff4.chunk.js","mappings":"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","sources":["components/FormInput/FormInput.jsx","components/UniversalForm/UniversalForm.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx","yupSchemas/index.js"],"sourcesContent":["import { useState } from 'react';\nimport { Field, useField } from 'formik';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Button,\n  Text,\n  Icon,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { MdVisibility, MdVisibilityOff, MdCheckCircle } from 'react-icons/md';\n\nconst FormInput = ({ name, type = 'text', label, placeholder = label }) => {\n  const [visible, setVisible] = useState(false);\n  const [field, meta] = useField(name);\n\n  const { error, touched, value } = meta;\n  const { name: inputName } = field;\n\n  const typeIsPassword = type === 'password';\n\n  return (\n    <FormControl isInvalid={error && touched}>\n      <FormLabel htmlFor={inputName}>{label}</FormLabel>\n      <InputGroup>\n        <Field\n          as={Input}\n          id={inputName}\n          {...field}\n          type={typeIsPassword ? (visible ? 'text' : 'password') : type}\n          placeholder={placeholder}\n          _placeholder={{ color: 'black' }}\n          autoComplete=\"new-password\"\n        />\n        {typeIsPassword && (\n          <InputRightElement>\n            <Button variant=\"ghost\" onClick={() => setVisible(!visible)}>\n              <Icon as={visible ? MdVisibility : MdVisibilityOff} />\n            </Button>\n          </InputRightElement>\n        )}\n      </InputGroup>\n      <FormErrorMessage>{error}</FormErrorMessage>\n\n      {!error && value && (\n        <Text color=\"green.500\">\n          <Icon as={MdCheckCircle} />\n          Success {inputName}\n        </Text>\n      )}\n    </FormControl>\n  );\n};\n\nexport default FormInput;\n","import { Button, Flex, useToast } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst UniversalForm = ({\n  initialValues,\n  validationSchema,\n  labelButtonSbmit,\n  operation,\n  handleSubmit,\n  children,\n}) => {\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const defaultHandleSubmit = (values, { resetForm, setSubmitting }) => {\n    dispatch(operation(values)).then(({ error, payload }) => {\n      setSubmitting(false);\n\n      if (error) {\n        toast({\n          title: 'Error',\n          status: 'error',\n          position: 'top-right',\n          description: payload,\n          isClosable: true,\n        });\n        return;\n      }\n      resetForm();\n    });\n  };\n\n  const onSubmit = handleSubmit || defaultHandleSubmit;\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      validateOnChange\n      onSubmit={onSubmit}\n    >\n      {props => {\n        return (\n          <Flex\n            as={Form}\n            direction=\"column\"\n            gap=\"10px\"\n            maxW=\"md\"\n            mx=\"auto\"\n            my=\"4\"\n            p=\"4\"\n            border=\"1px solid\"\n            borderColor=\"gray.300\"\n            borderRadius=\"md\"\n            autoComplete=\"new-password\"\n          >\n            {children}\n\n            <Button\n              type=\"submit\"\n              colorScheme=\"teal\"\n              mt=\"4\"\n              isLoading={props.isSubmitting}\n            >\n              {labelButtonSbmit}\n            </Button>\n          </Flex>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default UniversalForm;\n","import { logIn } from '../../redux/auth/operations';\nimport FormInput from 'components/FormInput/FormInput';\nimport UniversalForm from 'components/UniversalForm/UniversalForm';\nimport { LogInSchema } from 'yupSchemas';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = () => {\n  return (\n    <UniversalForm\n      initialValues={initialValues}\n      validationSchema={LogInSchema}\n      operation={logIn}\n      labelButtonSbmit=\"Log in\"\n    >\n      <FormInput\n        name=\"email\"\n        type=\"email\"\n        label=\"Email\"\n        placeholder=\"Enter email\"\n      />\n\n      <FormInput\n        name=\"password\"\n        type=\"password\"\n        label=\"Password\"\n        placeholder=\"Enter password\"\n      />\n    </UniversalForm>\n  );\n};\n\nexport default LoginForm;\n","import { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from '../redux/auth/selector';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport { Box, Container } from '@chakra-ui/react';\n\nconst LoginPage = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  return (\n    <Box as=\"section\" py={20}>\n      <Container maxW=\"2xl\">{!isLoggedIn && <LoginForm />}</Container>\n    </Box>\n  );\n};\n\nexport default LoginPage;\n","import * as Yup from 'yup';\n\nexport const LogInSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Is not in correct format')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(5, 'Password is too short - should be 5 chars minimum'),\n});\n\nexport const SignUpSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .matches(/^[A-Za-z]+$/, 'Only English letters')\n    .required('Required'),\n  email: Yup.string()\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Is not in correct format')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(7, 'Password is too short - should be 7 chars minimum'),\n});\n"],"names":["_ref","name","_ref$type","type","label","_ref$placeholder","placeholder","_useState","useState","_useState2","_slicedToArray","visible","setVisible","_useField","useField","_useField2","field","meta","error","touched","value","inputName","typeIsPassword","_jsxs","FormControl","isInvalid","children","_jsx","FormLabel","htmlFor","InputGroup","Field","_objectSpread","as","Input","id","_placeholder","color","autoComplete","InputRightElement","Button","variant","onClick","Icon","MdVisibility","MdVisibilityOff","FormErrorMessage","Text","MdCheckCircle","initialValues","validationSchema","labelButtonSbmit","operation","handleSubmit","dispatch","useDispatch","toast","useToast","onSubmit","values","_ref2","resetForm","setSubmitting","then","_ref3","payload","title","status","position","description","isClosable","Formik","validateOnChange","props","Flex","Form","direction","gap","maxW","mx","my","p","border","borderColor","borderRadius","colorScheme","mt","isLoading","isSubmitting","email","password","UniversalForm","LogInSchema","logIn","FormInput","isLoggedIn","useSelector","selectIsLoggedIn","Box","py","Container","LoginForm","Yup","shape","matches","required","min","SignUpSchema"],"sourceRoot":""}